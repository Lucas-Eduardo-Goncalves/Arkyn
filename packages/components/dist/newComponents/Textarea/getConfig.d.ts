import type { TextareaProps } from "@arkyn/types";
declare function getConfig(props: TextareaProps, isFocused: boolean): {
    name: string;
    suppressHydrationWarning?: boolean | undefined;
    color?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: import("react").AriaRole | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: import("react").ReactNode | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInput?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onReset?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onError?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPause?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onResize?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onClick?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onDrag?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragStart?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDrop?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onScroll?: import("react").UIEventHandler<HTMLTextAreaElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTextAreaElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTextAreaElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTextAreaElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTextAreaElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTextAreaElement>;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    nonce?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    form?: string | undefined;
    value?: string | readonly string[] | number | undefined;
    autoComplete?: string | undefined;
    maxLength?: number | undefined;
    minLength?: number | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    cols?: number | undefined;
    dirName?: string | undefined;
    wrap?: string | undefined;
    className: string;
    disabled: boolean;
    readOnly: boolean;
    onFocus: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onBlur: import("react").FocusEventHandler<HTMLTextAreaElement>;
    rows: number;
    title: string;
    style: import("react").CSSProperties;
    onChange: import("react").ChangeEventHandler<HTMLTextAreaElement>;
};
export { getConfig };
//# sourceMappingURL=getConfig.d.ts.map